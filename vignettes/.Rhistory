q("no")
dim(net)
commuter30
commuter30$SS
commuter30$RR
AIC.wsbm
fit.wsbm$self.ties
fit.wsbm$chain$self.ties
fit.wsbm$chain$hours
q("no")
fit.post
dim(fit.post)
args(wsbm)
image(commuter30$net)
commuter30$net
commuter30$BB
plot(igraph::graph.adjacency(commuter30$net))
warnings()
plot.wsbm(commmuter30)
plot.wsbm(commuter30)
q("no")
q("no")
q("no")
BB
q("no")
commuter30$pmat
diagnostic.plot(test.wsbm,"l")
diagnostic.plot(fit.wsbm.4,"l")
q("no")
q("no")
q("no")
q("no")
fit.wsbm.4
diagnostic.plot(fit.wsbm.6,"l")
diagnostic.plot(fit.wsbm.6)
fit.wsbm.6
diagnostic.plot(fit.wsbm.6,"s")
table(fit.wsbm.6$mmb)
plot(net.2$SS)
q("no")
names(dyn.test)
q("no")
names(dyn.test$chain)
dim(dyn.test$chain$mmb)
dim(dyn.test$chain$BB.mat)
dim(dyn.test$chain$SS.mat)
q("no")
pp
postp
ppred
ppred <- post.predict(dyn.test)
traceback()
q("no")
dim(ppred)
ppred[,,,1]
dim(ppred)
blah <- apply(ppred,c(1,2,3),mean)
pred
pred <- predict(dyn.test)
pred
par(mfrow=c(1,2));network.plot(pred[,,1])
network.plot(ppred[,,1])
network.plot(apply(ppred,c(1,2,3),mean)[,,1])
q("no")
test.1 <- wsbm(net.1$net,kk=3,verbose=0,

q("no")
net.1
predict(net.1)
plot(net.1)
network.plot(net.1)
network.plot.wsbm
network.plot(net.1$net)
class(net.1$net)
q("no")
net.1
plot(net.1)
network.plot(net.1)
q("no")
plot(net.1)
network.plot(net.1)
q("no")
plot(net.1)
network.plot(net.1)
network.plot(net.1$net)
logLik(net.1)
AIC(net.1)
BIC(net.1)
q("no")
traceback()
q("no")
plot(net.1)
data.gen(net.1)
net.gen(net.1)
net.gen(predict(net.1))
network.plot(net.1)
plot(net.1)
plot(net.1,zlevels=0:2)
plot(net.1,zlim=c(0,2))
max(net.1$net)
par(mfrow=c(1,2)
)
plot(net.1,zlim=c(0,9))
network.plot(net.1)
getwd()
setwd("/Users/dabbs2/Documents/networks/analysis-R/dynsbm-vignette/
"
setwd("/Users/dabbs2/Documents/networks/analysis-R/dynsbm-vignette/
"

setwd("/Users/dabbs2/Documents/networks/analysis-R/dynsbm-vignette/")
q("no")
commuter30
names(commuter30)
commuter30$SS
q("no")
getwd()
setwd("/Users/dabbs2/Documents/networks/analysis-R/dynsbm-vignette/")
q("no")
BB.prior
q("no")
q("no")
q("no")
q("no")
dyn.net
dim(dyn.net$wsbm.list)
q("no")
traceback()
q("no")
q("no")
traceback()
q("no")
c
dim(BB.mat)
dim(BB.prior)
c
q("no")
q("no")
init.vals$BB.prior
dim(init.vals$BB.prior)
dim(init.vals$BB.mat)
dim(init.vals$SS.prior)
dim(init.vals$SS.mat)
c
q("no")
c
n
ee
TT
dim(BB.mat)
n
n
kk
TT
c
q("no")
c
c
traceback()
q("no")
traceback()
q("no")
3
nn
kk
TT
ee
multi.int
dim(net.mat.clean)
is.na(net.mat.clean)
any(is.na(net.mat.clean))
tmap
hours.vec
priors$SS
priors$RR
priors$BB
dim(flatSS.prior)
length(flatSS.prior)
x
flatSS.prior[1:120]
flatRR.prior[1:120]
flatBB.prior[1:120]
flatBB.prior[1:(2*kk*kk)]
flatMMB[1:60]
flatSS[1:60]
flatRR[1:60]
flatBB[1:(kk*kk)]
ll.vec[1:10]
flatHH[1:180]
update.mmb
verbose
total
burn.in
thin
c
c
q("no")
dyn.ver$chain$BB.prior
dyn.test$chain$BB.prior
dim(dyn.ver$chain$BB.prior)
dim(dyn.test$chain$BB.prior)
dyn.ver
dyn.test
dyn.ver$mmb
q("no")
q("no")
q("no")
q("no")
traceback(
)
traceback(
)
q("no")
n
ll.best
ll.tmp
n
n
n
c
ll.tmp
ll.best
fit.best
c
c
fit.best
ll.tmp
n
ll.best
fit.best
c
c
q("no")
q("no")
test.1
get.iter.wsbm.mcmc(test.1,10)
q("no")
test.1
get.iter.wsbm.mcmc(test.1,10)
logLik(get.iter.wsbm.mcmc(test.1,10)
)
logLik(get.iter.wsbm.mcmc(test.1,10))
logLik(get.iter.wsbm.mcmc(test.1,11))
test.1$chain$logLik[10:11]
q("no")
q("no")
q("no")
q("no")
dim(tmap)
length(tamp)
length(tmap)
TT
q("no")
post.predict(fit.base)
blah <- post.predict(fit.base)
dim(blah)
network.plot(apply(blah,c(1,2),mean))
q("no")
get.iter(fit.base,2)
get.iter(fit.base,4)
blah <- post.predict(fit.base)
names(fit.base)
q("no")
post.predict(dyn.net)
class(dyn.net)
post.predict(net.1)
post.predict(net.2)
q("no")
post.predict(dyn.net)
dyn.test$chain$clean
q("no")
dyn.test$chain$mcmc.control$total
q("no")
net.gen(get.iter(dyn.test,10))
q("no")
create.wsbm.list(dyn.test)
plot(fit.base)
plot(fit.base)
q("no")
traceback()
q("no")
plot(dyn.net)
dyn.net$BB.prior
rgamma(100,1,1)
range(rgamma(100,3,1))
q("no")
sqrt(3)
sqrt(1)
curve(dgamma(x,1,1),from=0,to=6)
curve(dgamma(x,3,1),from=0,to=6,add=TRUE,col="red")
q("no")
q("no")
dyn.test$normalize
q("no")
post.predict(dc60)
names(dc60)
q("no")
q("no")
dim(ppred)
class(ppred)
is.matrix(ppred)
is.array(ppred)
data(commuter30)
class(commuter30$net)
is.array(commuter30$net)
attributes(commuter30$net)
inherits(commuter30$net)
is.array
.Primitive("is.array")
blah
blah <- array(rnorm(100),c(10,10))
class(blah)
is.matrix(blah)
is.array(blah)
scale
q("no")
network.plot(dc60$net.mat)
q("no")
warnings()
q("no")
dc60$ee
dc60$tmap
which(dc60$tmap == 1:dc60$ee)
which(dc60$tmap) == 1
which(dc60$tmap == 1)
which.min(dc60$tmap)
q("no")
q("no")
q("no")
fun(10)
fun(1)
fun(0)
q("no")
q("no")
plot(dyn.test)
q("no")
traceback()
q("no")
q("no")
q("no")
q("no")
q("no")
BlockMat.plot(dyn.test)
BlockMat.plot(dyn.test)
BlockMat.plot(dyn.test,tclass=1)
dim(dyn.test$BB)
names(dyn.test)
dim(dyn.test$chain$BB.mat)
q("no")
q("no")
q("no")
dim(dyn.test$chain$SS)
dim(dyn.test$chain$SS.mat)
q("no")
q("no")
q("no")
blah <- par()
blah$omd
q("no")
q("no")
q("no")
title(main="blah",outer=TRUE,cex=5)
title(main="blah",outer=TRUE,cex=100)
title(main="blah",outer=TRUE,cex.main=5)
q("no")
q("no")
traceback()
dim(dyn.test$chain$RR.mat)
dim(dyn.test$chain$SS.mat[,,1])
q("no")
q("no")
q("no")
q("no")
q("no")
q("no")
plot(dyn.test$chain$BB.prior[ii,jj,,1])


dim(dyn.test$chain$BB.prior[1,1,,,1])
.5^-1000
.5^(1/1000)
.5^(1/1000)
.5^(1/10)
1.5 - .5^1/100000
1.5 - .5^(1/10000)
1.5 - .5^(1/sqrt(1000))
fun
fun <- function(x) return(1.5 - .5^(1/sqrt(x)))
curve(fun(x),from=1,to=1000)
node.gamma.plot(dyn.test$chain$SS.prior[,,,1])
q("no")
SenderMat.plot(dyn.test,1)
boxplot(out.wsbm$chain$SS)
boxplot(t(out.wsbm$chain$SS))
sender.effect.plot.wsbm.mcmc(out.wsbm)
sender.effect.plot.wsbm.mcmc(out.wsbm)
sender.effect.plot.wsbm.mcmc(out.wsbm)
receiver.effect.plot.wsbm.mcmc(out.wsbm)
block.param.plot.wsbm.mcmc(out.wsbm)
block.param.plot.wsbm.mcmc(out.wsbm)
block.param.plot.wsbm.mcmc(out.wsbm)
dim(out.wsbm$chain$BB)
dim(out.wsbm$chain$BB[1:2,1:2,])
block.param.plot.wsbm.mcmc(out.wsbm)
param.plot.wsbm.mcmc(out.wsbm,type="b")
q("no")
q("no")
dyn.test$BB.prior[,,tclass]
           

dyn.test$BB.prior[1,1,,tclass]
dyn.test$BB.prior[1,1,,1]
quote
quotin
traceback()
dim(dyn.test$SS.prior)
q("no")
BlockMat.Post.Density.Plot(dyn.test,1,1,1)
q("no")
q("no")
setwd("/Users/dabbs2/Documents/networks/code/lvnm/")
library(devtools)
library(devtools)
document()
document()
document()
document()
q("no")
